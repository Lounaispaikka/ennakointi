/***View*LouSurvey.js*@author Ville Glad**/Ext.define('Lougis.view.LouSurvey', {	extend: 'Lougis.view.Panel',	alias: 'widget.lousurvey',	id: 'LougisLouSurveyWidget',	title: 'LouSurvey - kyselylomake',	border: 0,	anchor: '100% 100%',	items: [],    treeData: [],    treeStoreRoot: [],		initComponent: function() {			this.callParent();				this.surveyTreePanel = this.createSurveyTreePanel();		this.surveyConfigPanel = this.createSurveyConfigPanel();		this.surveyPanel = this.createSurveyPanel();		this.surveyQuestionsPanel = this.createSurveyQuestionsPanel();		this.surveyTabPanel = this.createSurveyTabPanel();		this.questionWizard = this.createQuestionWizard();						this.lsPanel = Ext.create('Ext.panel.Panel', {			layout: 'border',			border: 0,			anchor: '100% 100%',			items: [ this.surveyTreePanel, this.surveyTabPanel]		});				this.add(this.lsPanel);			console.log("Hiphei LouSurveyPanel");	}		,createSurveyTreePanel: function () {				this.surveyTreeStore = Ext.create('Ext.data.TreeStore', {			fields: [ 'text', 'survey_id' ],			proxy: {				type: 'ajax',				url: '/run/lougis/lousurvey/surveyTreeJson/'			},			folderSort: false,			root: null		});		return Ext.create('Ext.tree.Panel', {			id: 'surveyTreePanel',			title: 'Kyselylomakkeet',			region:'west',			//store:'LouSurveyTreeStore',			store: this.surveyTreeStore,			width: 300,			split: true, //resizable			collapsible: true,   // make collapsible			layout: 'fit',    		scroll: 'both',			anchor: '250 100%',    		rootVisible: false, 	        allowContainerDrop: false,			buttonAlign: 'left',			buttons: [				Ext.create('Ext.Button', {					text: 'Uusi kyselylomake',					icon: '/img/icons/16x16/page_edit.png',					scope: this,				    handler: function() {				    /*	if ( this.newsEditorPanel.disabled ) this.newsEditorPanel.enable();				    	if ( this.newsPagesPanel.disabled ) this.newsPagesPanel.enable();				    	this.newsEditorPanel.getForm().reset();				    	this.cleanPagesTreeFromChecks();				    	CKEDITOR.instances.newsCKEditorField.setData("");				    	Ext.getCmp('newsTitle').focus();*/						console.log("uusi kyselylomake");				    }				})			],			listeners: {				itemclick: {					scope: this,					fn: function( view, record, item, index ){						if ( record.data.survey_id != null ) {							console.log("aps");							this.loadSurveyToEditor( record.data.survey_id );													}						else { console.log("nullaps", record.data.survey_id); }					}				}			}		});    	}		,createSurveyTabPanel: function() {				this.tabPanel = Ext.create('Ext.tab.Panel', {				id: 'surveyTabPanel',				region: 'center',				disabled: true,				anchor: '100% 100%',				defaults: {					bodyStyle: 'padding: 15px'				},				activeItem: 1,				items: [ this.surveyConfigPanel ,this.surveyPanel ]		});				return this.tabPanel;	}		,createSurveyConfigPanel: function() { 				this.surveyConfigPanel = Ext.create('Ext.form.Panel', {			id: 'surveyConfigPanel',			itemId: 'surveyConfigTab',    		url: '/run/lougis/lousurvey/saveSurveyConfig/',			region: 'center',			disabled: true,			title: 'Kyselyn asetukset',			anchor: '100% 100%',			autoScroll: true,			buttonAlign: 'left',			bodyPadding: '10 10 10 10',			defaultType: 'textarea',			items: this.getSurveyConfigFormItems(),			buttons: [    			Ext.create('Ext.Button', {					text: 'Tallenna ',					icon: '/img/icons/16x16/disk.png',					width: 150,					scope: this,				    handler: function() {				    	console.log(this.surveyConfigPanel.getForm());				    	this.surveyConfigPanel.getForm().submit({							scope: this,							success: function(form, action) {								var res = Ext.JSON.decode(action.response.responseText);								if ( res.success ) {									//form.findField('survey[id]').setValue(res.survey_id);									Ext.Msg.alert('Tallennus onnistui', res.msg);								} else {									Ext.Msg.alert('Virhe1!', res.msg);								}								this.reloadSurveyTreeStore();							},							failure: function(form, action) {								Ext.Msg.alert('Virhe2!', action.result.msg);							}						});										    }				}),				'->',				Ext.create('Ext.Button', {					text: 'Poista',					icon: '/img/icons/16x16/delete.png',					width: 100,					scope: this,				    handler: function() {				    	if ( confirm("Haluatko varmasti poistaa tämän lomakkeen? Toimintoa ei voi peruuttaa.") ) {				    							    	Ext.Ajax.request({								url: '/run/lougis/news/deleteSurvey/',								scope: this,								params: {									//news_id: this.newsEditorPanel.getForm().getFieldValues().news_id								},								success: function( xhr ){									var res = Ext.JSON.decode(xhr.responseText);									if ( res.success ) {										this.reloadSurveyTreeStore();										this.surveyConfigPanel.disable();										Ext.Msg.alert('Lomake poistettu', res.msg);									} else {										Ext.Msg.alert('Virhe!', res.msg);									}								}							});				    						        }				        				    }				})			]		});    	return this.surveyConfigPanel;        }		,createSurveyPanel: function() {				this.surveyPanel = Ext.create('Ext.panel.Panel', {			xtype: 'container',			id: 'surveyPanel',			itemId: 'surveyPanel',			region: 'center',			disabled: false,			autoScroll: true,			layout: 'anchor',			title: 'Kysymykset',			items: [ this.surveyQuestionsPanel]		});		return this.surveyPanel;	}		,createSurveyQuestionsPanel: function() {  		this.surveyQuestionsPanel = Ext.create('Ext.form.Panel', {			id: 'surveyQuestionsPanel',			itemId: 'surveyQuestionsTab',    		url: '/run/lougis/lousurvey/saveSurveyQuestions/',			region: 'center',			disabled: true,			title: 'Kysymykset',			anchor: '100% 100%',			autoScroll: true,			buttonAlign: 'left',			bodyPadding: '10 10 10 10',			defaultType: 'textarea',			items: [],//this.getSurveyQuestionsFormItems(),			buttons: [    			Ext.create('Ext.Button', {					text: 'Tallenna ',					icon: '/img/icons/16x16/disk.png',					width: 150,					scope: this,				    /*handler: function() {				    	console.log(this.surveyConfigPanel.getForm());				    	this.surveyConfigPanel.getForm().submit({							scope: this,							success: function(form, action) {								var res = Ext.JSON.decode(action.response.responseText);								if ( res.success ) {									//form.findField('survey[id]').setValue(res.survey_id);									Ext.Msg.alert('Tallennus onnistui', res.msg);								} else {									Ext.Msg.alert('Virhe1!', res.msg);								}								this.reloadSurveyTreeStore();							},							failure: function(form, action) {								Ext.Msg.alert('Virhe2!', action.result.msg);							}						});										    }*/				}),				'->',				Ext.create('Ext.Button', {					text: 'Poista',					icon: '/img/icons/16x16/delete.png',					width: 100,					scope: this,				    handler: function() {				    	if ( confirm("Haluatko varmasti poistaa tämän lomakkeen? Toimintoa ei voi peruuttaa.") ) {				    							    	Ext.Ajax.request({								url: '/run/lougis/news/deleteSurvey/',								scope: this,								params: {									//news_id: this.newsEditorPanel.getForm().getFieldValues().news_id								},								success: function( xhr ){									var res = Ext.JSON.decode(xhr.responseText);									if ( res.success ) {										this.reloadSurveyTreeStore();										this.surveyConfigPanel.disable();										Ext.Msg.alert('Lomake poistettu', res.msg);									} else {										Ext.Msg.alert('Virhe!', res.msg);									}								}							});				    						        }				        				    }				})			]		});    	return this.surveyQuestionsPanel;    }		,reloadSurveyTreeStore: function() {        	this.surveyTreeStore.getRootNode().removeAll();    	this.surveyTreeStore.load();        }		,loadSurveyToEditor: function( surveyId ) {    			if ( this.surveyTabPanel.disabled ) this.surveyTabPanel.enable();    	if ( this.surveyConfigPanel.disabled ) this.surveyConfigPanel.enable();		if ( this.surveyQuestionsPanel.disabled ) this.surveyQuestionsPanel.enable();    			Ext.Ajax.request({			url: '/run/lougis/lousurvey/getSurveyJson/',			scope: this,			params: {				survey_id: surveyId			},			success: function( xhr ){				var res = Ext.JSON.decode(xhr.responseText);				if ( res.success ) {					this.updateConfigForm( res.data ); //load config-tab form values					this.updateQuestionsForm ( res.data.form_ext ); //load questions-tab forms				} else {					Ext.Msg.alert('Virhe!', res.msg);				}			}		});		    }		,updateConfigForm: function( surveyData ) {    			this.surveyConfigPanel.getForm().setValues( surveyData );		    }		,updateQuestionsForm: function( surveyQuestionsItems) {		/*var wtf = Ext.create('Ext.form.field.Text', {			name: 'puu',			fieldLabel: 'puu',			value: 'wtf'		});		this.surveyConfigPanel.add(wtf);		*/				var jsonData = Ext.JSON.decode(surveyQuestionsItems); //decode json data to array object (items array)		if ( jsonData ) {			console.log("jsonData");			this.surveyQuestionsPanel.destroy(); //destroy panel			this.surveyQuestionsPanel = this.createSurveyQuestionsPanel(); //create empty panel			this.surveyTabPanel.add(this.surveyQuestionsPanel); //add created panel to tab-panel			this.surveyQuestionsPanel.enable(); // on creation panel is disabled so enable it!			this.surveyQuestionsPanel.add(jsonData.items); //add object.items to form panel			console.log("sqp", this.surveyQuestionsPanel);		}		else {			console.log("sqp", this.surveyQuestionsPanel);			this.surveyQuestionsPanel.destroy();		}		//this.questionWizard = this.createQuestionWizard();		//this.surveyQuestionsPanel.add(this.questionWizard);	}		,getSurveyConfigFormItems: function( surveyData) {			if ( typeof surveyData === 'undefined' ) {    	    		surveyData = {    			survey_id: null,    			title: null,				description: null,				start_date: null,				end_date: null,				created_by: null       		};		    	}				this.surveyConfigFormItems = [			{				name: 'survey[id]',				id: 'id',				xtype: 'textfield',				readOnly: true,				value: surveyData.id		    },			{				name: 'survey[created_by]',				id: 'created_by',				xtype: 'textfield',				readOnly: true,				value: surveyData.created_by		    },			{				xtype: 'textfield',				id: 'title',				fieldLabel: 'Otsikko',				name: 'survey[title]',				width: 680,				maxLength: 250,				value: surveyData.title,				enableKeyEvents: true		    },			{				xtype: 'textarea',				id: 'description',				fieldLabel: 'Lyhyt kuvaus',				name: 'survey[description]',				width: 680,				height: 50,				maxLength: 250,				value: surveyData.description		    },			{				xtype: 'datefield',				id: 'start_date',				fieldLabel: 'Kysely alkaa (pp.kk.vvvv)',				name: 'survey[start_date]',				format: "d.m.Y",				altFormats: "j.n.y|j.n.Y|j.m.y|j.m.Y|d.n.y|d.n.Y|d.m.y",				value: surveyData.start_date		    },			{				xtype: 'datefield',				id: 'end_date',				fieldLabel: 'Kysely loppuu (pp.kk.vvvv)',				name: 'survey[end_date]',				format: "d.m.Y",				altFormats: "j.n.y|j.n.Y|j.m.y|j.m.Y|d.n.y|d.n.Y|d.m.y",				value: surveyData.end_date		    },					]				return this.surveyConfigFormItems;	}		,createQuestionWizard: function() {		this.newQuestionCardPanel = Ext.create('Ext.panel.Panel', {			layout: 'card',			width: 300,			height: 200,			flex: 2,			items: [				{ html: 'Card 1' },				{ html: 'Card 2' }			]		});			return this.newQuestionCardPanel;	}});